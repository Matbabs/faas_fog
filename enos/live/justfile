RUN := "poetry run python integration.py"

# Entrypoint, run deploy and then tunnels
_default:
    @just --choose

# Deploy the stack to redy the eperiment on grid'5000
deploy:
    {{RUN}} up
    {{RUN}} k3s-deploy
    {{RUN}} add-net-constraints
    {{RUN}} monitoring

# Refresh the container images hosted by k3s on all deployed nodes
refresh:
    {{RUN}} k3s-deploy

# Open SSH tunnels
tunnels:
    {{RUN}} tunnels

# Delete the Job on grid'5000 and local EnosLib files
clean:
    {{RUN}} clean
    rm -rf enos_* current cachedir __enos*

collect port:
    just _collect {{port}} | gzip > $(date +"%Y_%m_%d_%I_%M_%p")_metrics.gz

_collect $port:
    #!/usr/bin/python3
    import csv
    import requests
    import sys
    import os

    URL = f"http://localhost:{os.environ['port']}"

    def GetMetrixNames(url):
        response = requests.get('{0}/api/v1/label/__name__/values'.format(url))
        names = response.json()['data']    #Return metrix names
        return names
    """
    Prometheus hourly data as csv.
    """
    writer = csv.writer(sys.stdout, delimiter="\t")

    if len(sys.argv) != 1:
        print(f'Usage: {sys.argv[0]}\n use port env variable to set the port on localhost')
        sys.exit(1)
    metrixNames=GetMetrixNames(URL)

    writeHeader=True
    for metrixName in metrixNames:
        #now its hardcoded for hourly
        response = requests.get('{0}/api/v1/query'.format(URL), params={'query': metrixName+'[1h]'})
        results = response.json()['data']['result']

        # Build a list of all labelnames used.
        #gets all keys and discard __name__
        labelnames = set()
        for result in results:
          labelnames.update(result['metric'].keys())

        # Canonicalize
        labelnames.discard('__name__')
        labelnames = sorted(labelnames)

        # Write the samples.
        if writeHeader:
          writer.writerow(['name', 'timestamp', 'value'] + labelnames)
          writeHeader=False

        for result in results:
          l = [result['metric'].get('__name__', '')] + result['values']
          for label in labelnames:
              l.append(result['metric'].get(label, ''))
              writer.writerow(l)