/* 
 * OpenFaaS API Gateway
 *
 * OpenFaaS API documentation
 *
 * OpenAPI spec version: 0.8.12
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct LogEntry {
  /// the function name
  #[serde(rename = "name")]
  name: Option<String>,
  /// the name/id of the specific function instance
  #[serde(rename = "instance")]
  instance: Option<String>,
  /// the timestamp of when the log message was recorded
  #[serde(rename = "timestamp")]
  timestamp: Option<String>,
  /// raw log message content
  #[serde(rename = "text")]
  text: Option<String>
}

impl LogEntry {
  pub fn new() -> LogEntry {
    LogEntry {
      name: None,
      instance: None,
      timestamp: None,
      text: None
    }
  }

  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> LogEntry {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

  pub fn set_instance(&mut self, instance: String) {
    self.instance = Some(instance);
  }

  pub fn with_instance(mut self, instance: String) -> LogEntry {
    self.instance = Some(instance);
    self
  }

  pub fn instance(&self) -> Option<&String> {
    self.instance.as_ref()
  }

  pub fn reset_instance(&mut self) {
    self.instance = None;
  }

  pub fn set_timestamp(&mut self, timestamp: String) {
    self.timestamp = Some(timestamp);
  }

  pub fn with_timestamp(mut self, timestamp: String) -> LogEntry {
    self.timestamp = Some(timestamp);
    self
  }

  pub fn timestamp(&self) -> Option<&String> {
    self.timestamp.as_ref()
  }

  pub fn reset_timestamp(&mut self) {
    self.timestamp = None;
  }

  pub fn set_text(&mut self, text: String) {
    self.text = Some(text);
  }

  pub fn with_text(mut self, text: String) -> LogEntry {
    self.text = Some(text);
    self
  }

  pub fn text(&self) -> Option<&String> {
    self.text.as_ref()
  }

  pub fn reset_text(&mut self) {
    self.text = None;
  }

}



