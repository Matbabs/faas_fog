---
swagger: "2.0"
info:
  description: "OpenFaaS API documentation"
  version: "0.8.12"
  title: "OpenFaaS API Gateway"
  license:
    name: "MIT"
basePath: "/"
schemes:
- "http"
paths:
  /system/functions:
    get:
      summary: "Get a list of deployed functions with: stats and image digest"
      operationId: "system_functions_get"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "List of deployed functions."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/FunctionListEntry"
      x-swagger-router-controller: "swagger_server.controllers.default_controller"
    post:
      summary: "Deploy a new function."
      description: ""
      operationId: "system_functions_post"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Function to deploy"
        required: true
        schema:
          $ref: "#/definitions/FunctionDefinition"
      responses:
        "202":
          description: "Accepted"
        "400":
          description: "Bad Request"
        "500":
          description: "Internal Server Error"
      x-swagger-router-controller: "swagger_server.controllers.default_controller"
    put:
      summary: "Update a function."
      description: ""
      operationId: "system_functions_put"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Function to update"
        required: true
        schema:
          $ref: "#/definitions/FunctionDefinition"
      responses:
        "200":
          description: "Accepted"
        "400":
          description: "Bad Request"
        "404":
          description: "Not Found"
        "500":
          description: "Internal Server Error"
      x-swagger-router-controller: "swagger_server.controllers.default_controller"
    delete:
      summary: "Remove a deployed function."
      description: ""
      operationId: "system_functions_delete"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Function to delete"
        required: true
        schema:
          $ref: "#/definitions/DeleteFunctionRequest"
      responses:
        "200":
          description: "OK"
        "400":
          description: "Bad Request"
        "404":
          description: "Not Found"
        "500":
          description: "Internal Server Error"
      x-swagger-router-controller: "swagger_server.controllers.default_controller"
  /system/alert:
    post:
      summary: "Event-sink for AlertManager, for auto-scaling"
      description: "Internal use for AlertManager, requires valid AlertManager alert\
        \ JSON"
      operationId: "system_alert_post"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Incoming alert"
        required: false
        schema:
          type: "object"
          example: "{\"receiver\": \"scale-up\",\n  \"status\": \"firing\",\n  \"\
            alerts\": [{\n      \"status\": \"firing\",\n      \"labels\": {\n   \
            \       \"alertname\": \"APIHighInvocationRate\",\n          \"code\"\
            : \"200\",\n          \"function_name\": \"func_nodeinfo\",\n        \
            \  \"instance\": \"gateway:8080\",\n          \"job\": \"gateway\",\n\
            \          \"monitor\": \"faas-monitor\",\n          \"service\": \"gateway\"\
            ,\n          \"severity\": \"major\",\n          \"value\": \"8.998200359928017\"\
            \n      },\n      \"annotations\": {\n          \"description\": \"High\
            \ invocation total on gateway:8080\",\n          \"summary\": \"High invocation\
            \ total on gateway:8080\"\n      },\n      \"startsAt\": \"2017-03-15T15:52:57.805Z\"\
            ,\n      \"endsAt\": \"0001-01-01T00:00:00Z\",\n      \"generatorURL\"\
            : \"http://4156cb797423:9090/graph?g0.expr=rate%28gateway_function_invocation_total%5B10s%5D%29+%3E+5\\\
            u0026g0.tab=0\"\n  }],\n  \"groupLabels\": {\n      \"alertname\": \"\
            APIHighInvocationRate\",\n      \"service\": \"gateway\"\n  },\n  \"commonLabels\"\
            : {\n      \"alertname\": \"APIHighInvocationRate\",\n      \"code\":\
            \ \"200\",\n      \"function_name\": \"func_nodeinfo\",\n      \"instance\"\
            : \"gateway:8080\",\n      \"job\": \"gateway\",\n      \"monitor\": \"\
            faas-monitor\",\n      \"service\": \"gateway\",\n      \"severity\":\
            \ \"major\",\n      \"value\": \"8.998200359928017\"\n  },\n  \"commonAnnotations\"\
            : {\n      \"description\": \"High invocation total on gateway:8080\"\
            ,\n      \"summary\": \"High invocation total on gateway:8080\"\n  },\n\
            \  \"externalURL\": \"http://f054879d97db:9093\",\n  \"version\": \"3\"\
            ,\n  \"groupKey\": 18195285354214864953\n}"
      responses:
        "200":
          description: "Alert handled successfully"
        "500":
          description: "Internal error with swarm or request JSON invalid"
      x-swagger-router-controller: "swagger_server.controllers.default_controller"
  /async-function/{functionName}:
    post:
      summary: "Invoke a function asynchronously in OpenFaaS"
      description: "See https://docs.openfaas.com/reference/async/."
      operationId: "async_function_function_name_post"
      parameters:
      - name: "functionName"
        in: "path"
        description: "Function name"
        required: true
        type: "string"
      - in: "body"
        name: "input"
        description: "(Optional) data to pass to function"
        required: false
        schema:
          type: "string"
          format: "binary"
          example: "{\"hello\": \"world\"}"
      responses:
        "202":
          description: "Request accepted and queued"
        "404":
          description: "Not Found"
        "500":
          description: "Internal Server Error"
      x-swagger-router-controller: "swagger_server.controllers.default_controller"
  /function/{functionName}:
    post:
      summary: "Invoke a function defined in OpenFaaS"
      operationId: "function_function_name_post"
      parameters:
      - name: "functionName"
        in: "path"
        description: "Function name"
        required: true
        type: "string"
      - in: "body"
        name: "input"
        description: "(Optional) data to pass to function"
        required: false
        schema:
          type: "string"
          format: "binary"
          example: "{\"hello\": \"world\"}"
      responses:
        "200":
          description: "Value returned from function"
        "404":
          description: "Not Found"
        "500":
          description: "Internal server error"
      x-swagger-router-controller: "swagger_server.controllers.default_controller"
  /system/scale-function/{functionName}:
    post:
      summary: "Scale a function"
      operationId: "system_scale_function_function_name_post"
      parameters:
      - name: "functionName"
        in: "path"
        description: "Function name"
        required: true
        type: "string"
      - in: "body"
        name: "input"
        description: "Function to scale plus replica count"
        required: false
        schema:
          type: "string"
          format: "binary"
          example: "{\"service\": \"hello-world\", \"replicas\": 10}"
      responses:
        "200":
          description: "Scaling OK"
        "202":
          description: "Scaling OK"
        "404":
          description: "Function not found"
        "500":
          description: "Error scaling function"
      x-swagger-router-controller: "swagger_server.controllers.default_controller"
  /system/function/{functionName}:
    get:
      summary: "Get a summary of an OpenFaaS function"
      operationId: "system_function_function_name_get"
      parameters:
      - name: "functionName"
        in: "path"
        description: "Function name"
        required: true
        type: "string"
      responses:
        "200":
          description: "Function Summary"
          schema:
            $ref: "#/definitions/FunctionListEntry"
        "404":
          description: "Not Found"
        "500":
          description: "Internal Server Error"
      x-swagger-router-controller: "swagger_server.controllers.default_controller"
  /system/secrets:
    get:
      summary: "Get a list of secret names and metadata from the provider"
      operationId: "system_secrets_get"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "List of submitted secrets."
          schema:
            $ref: "#/definitions/SecretName"
      x-swagger-router-controller: "swagger_server.controllers.default_controller"
    post:
      summary: "Create a new secret."
      description: ""
      operationId: "system_secrets_post"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "A new secret to create"
        required: true
        schema:
          $ref: "#/definitions/Secret"
      responses:
        "201":
          description: "Created"
        "400":
          description: "Bad Request"
        "500":
          description: "Internal Server Error"
      x-swagger-router-controller: "swagger_server.controllers.default_controller"
    put:
      summary: "Update a secret."
      description: ""
      operationId: "system_secrets_put"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Secret to update"
        required: true
        schema:
          $ref: "#/definitions/Secret"
      responses:
        "200":
          description: "Ok"
        "400":
          description: "Bad Request"
        "404":
          description: "Not Found"
        "405":
          description: "Method Not Allowed. Secret update is not allowed in faas-swarm."
        "500":
          description: "Internal Server Error"
      x-swagger-router-controller: "swagger_server.controllers.default_controller"
    delete:
      summary: "Remove a secret."
      description: ""
      operationId: "system_secrets_delete"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Secret to delete"
        required: true
        schema:
          $ref: "#/definitions/SecretName"
      responses:
        "204":
          description: "OK"
        "400":
          description: "Bad Request"
        "404":
          description: "Not Found"
        "500":
          description: "Internal Server Error"
      x-swagger-router-controller: "swagger_server.controllers.default_controller"
  /system/logs:
    get:
      summary: "Get a stream of the logs for a specific function"
      operationId: "system_logs_get"
      produces:
      - "application/x-ndjson"
      parameters:
      - name: "name"
        in: "query"
        description: "Function name"
        required: true
        type: "string"
      - name: "since"
        in: "query"
        description: "Only return logs after a specific date (RFC3339)"
        required: false
        type: "string"
      - name: "tail"
        in: "query"
        description: "Sets the maximum number of log messages to return, <=0 means\
          \ unlimited"
        required: false
        type: "integer"
      - name: "follow"
        in: "query"
        description: "When true, the request will stream logs until the request timeout"
        required: false
        type: "boolean"
      responses:
        "200":
          description: "Newline delimited stream of log messages"
          schema:
            $ref: "#/definitions/LogEntry"
        "404":
          description: "Not Found"
        "500":
          description: "Internal Server Error"
      x-swagger-router-controller: "swagger_server.controllers.default_controller"
  /system/info:
    get:
      summary: "Get info such as provider version number and provider orchestrator"
      operationId: "system_info_get"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "Info result"
          schema:
            $ref: "#/definitions/Info"
        "404":
          description: "Provider does not support info endpoint"
        "500":
          description: "Internal Server Error"
      x-swagger-router-controller: "swagger_server.controllers.default_controller"
  /healthz:
    get:
      summary: "Healthcheck"
      operationId: "healthz_get"
      parameters: []
      responses:
        "200":
          description: "Healthy"
        "500":
          description: "Not healthy"
      x-swagger-router-controller: "swagger_server.controllers.default_controller"
securityDefinitions:
  basicAuth:
    type: "basic"
    x-basicInfoFunc: "swagger_server.controllers.authorization_controller.check_basicAuth"
definitions:
  Info:
    type: "object"
    required:
    - "provider"
    - "version"
    properties:
      provider:
        type: "object"
        description: "The OpenFaaS Provider"
        properties:
          provider:
            type: "string"
            example: "faas-netes"
          orchestration:
            type: "string"
            example: "kubernetes"
          version:
            type: "object"
            description: "Version of the OpenFaaS Provider"
            properties:
              commit_message:
                type: "string"
                example: "Sample Message"
              sha:
                type: "string"
                example: "7108418d9dd6b329ddff40e7393b3166f8160a88"
              release:
                type: "string"
                format: "semver"
                example: "0.2.6"
      version:
        type: "object"
        description: "Version of the Gateway"
        properties:
          commit_message:
            type: "string"
            example: "Sample Message"
          sha:
            type: "string"
            example: "7108418d9dd6b329ddff40e7393b3166f8160a88"
          release:
            type: "string"
            format: "semver"
            example: "0.8.9"
      arch:
        type: "string"
        example: "x86_64"
        description: "Platform architecture"
    example:
      provider: "{}"
      arch: "x86_64"
      version: "{}"
  DeleteFunctionRequest:
    type: "object"
    required:
    - "functionName"
    properties:
      functionName:
        type: "string"
        example: "nodeinfo"
        description: "Name of deployed function"
    example:
      functionName: "nodeinfo"
  FunctionDefinition:
    type: "object"
    required:
    - "envProcess"
    - "image"
    - "service"
    properties:
      service:
        type: "string"
        example: "nodeinfo"
        description: "Name of deployed function"
      network:
        type: "string"
        example: "func_functions"
        description: "Network, usually func_functions for Swarm (deprecated)"
      image:
        type: "string"
        example: "functions/nodeinfo:latest"
        description: "Docker image in accessible registry"
      envProcess:
        type: "string"
        example: "node main.js"
        description: "Process for watchdog to fork"
      envVars:
        type: "object"
        description: "Overrides to environmental variables"
        additionalProperties:
          type: "string"
      constraints:
        type: "array"
        items:
          type: "string"
          example: "node.platform.os == linux"
          description: "Constraints are specific to OpenFaaS Provider"
      labels:
        type: "object"
        example:
          foo: "bar"
        description: "A map of labels for making scheduling or routing decisions"
        additionalProperties:
          type: "string"
      annotations:
        type: "object"
        example:
          topics: "awesome-kafka-topic"
          foo: "bar"
        description: "A map of annotations for management, orchestration, events and\
          \ build tasks"
        additionalProperties:
          type: "string"
      secrets:
        type: "array"
        items:
          type: "string"
          example: "secret-name-1"
          description: "An array of names of secrets that are required to be loaded\
            \ from the Docker Swarm."
      registryAuth:
        type: "string"
        example: "dXNlcjpwYXNzd29yZA=="
        description: "Private registry base64-encoded basic auth (as present in ~/.docker/config.json)"
      limits:
        type: "object"
        properties:
          memory:
            type: "string"
            example: "128M"
          cpu:
            type: "string"
            example: "0.01"
      requests:
        type: "object"
        properties:
          memory:
            type: "string"
            example: "128M"
          cpu:
            type: "string"
            example: "0.01"
      readOnlyRootFilesystem:
        type: "boolean"
        description: "Make the root filesystem of the function read-only"
    example:
      image: "functions/nodeinfo:latest"
      envVars:
        key: "envVars"
      annotations:
        topics: "awesome-kafka-topic"
        foo: "bar"
      requests: "{}"
      constraints:
      - "node.platform.os == linux"
      - "node.platform.os == linux"
      secrets:
      - "secret-name-1"
      - "secret-name-1"
      network: "func_functions"
      labels:
        foo: "bar"
      readOnlyRootFilesystem: true
      envProcess: "node main.js"
      service: "nodeinfo"
      registryAuth: "dXNlcjpwYXNzd29yZA=="
      limits: "{}"
  FunctionListEntry:
    type: "object"
    required:
    - "availableReplicas"
    - "envProcess"
    - "image"
    - "invocationCount"
    - "labels"
    - "name"
    - "replicas"
    properties:
      name:
        type: "string"
        example: "nodeinfo"
        description: "The name of the function"
      image:
        type: "string"
        example: "functions/nodeinfo:latest"
        description: "The fully qualified docker image name of the function"
      invocationCount:
        type: "number"
        format: "integer"
        example: 1337
        description: "The amount of invocations for the specified function"
      replicas:
        type: "number"
        format: "integer"
        example: 2
        description: "The current minimal ammount of replicas"
      availableReplicas:
        type: "number"
        format: "integer"
        example: 2
        description: "The current available amount of replicas"
      envProcess:
        type: "string"
        example: "node main.js"
        description: "Process for watchdog to fork"
      labels:
        type: "object"
        example:
          foo: "bar"
        description: "A map of labels for making scheduling or routing decisions"
        additionalProperties:
          type: "string"
      annotations:
        type: "object"
        example:
          topics: "awesome-kafka-topic"
          foo: "bar"
        description: "A map of annotations for management, orchestration, events and\
          \ build tasks"
        additionalProperties:
          type: "string"
    example:
      image: "functions/nodeinfo:latest"
      envProcess: "node main.js"
      replicas: 2
      name: "nodeinfo"
      invocationCount: 1337
      annotations:
        topics: "awesome-kafka-topic"
        foo: "bar"
      availableReplicas: 2
      labels:
        foo: "bar"
  Secret:
    type: "object"
    required:
    - "name"
    properties:
      name:
        type: "string"
        example: "aws-key"
        description: "Name of secret"
      value:
        type: "string"
        example: "changeme"
        description: "Value of secret in plain-text"
    example:
      name: "aws-key"
      value: "changeme"
  LogEntry:
    type: "object"
    properties:
      name:
        type: "string"
        description: "the function name"
      instance:
        type: "string"
        description: "the name/id of the specific function instance"
      timestamp:
        type: "string"
        format: "date-time"
        description: "the timestamp of when the log message was recorded"
      text:
        type: "string"
        description: "raw log message content"
  SecretName:
    type: "object"
    properties:
      name:
        type: "string"
        example: "aws-key"
        description: "Name of secret"
    example:
      name: "aws-key"
externalDocs:
  description: "More documentation available on Github"
  url: "https://github.com/openfaas/faas"
