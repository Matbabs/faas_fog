# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class FunctionDefinition(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, service: str=None, network: str=None, image: str=None, env_process: str=None, env_vars: Dict[str, str]=None, constraints: List[str]=None, labels: Dict[str, str]=None, annotations: Dict[str, str]=None, secrets: List[str]=None, registry_auth: str=None, limits: object=None, requests: object=None, read_only_root_filesystem: bool=None):  # noqa: E501
        """FunctionDefinition - a model defined in Swagger

        :param service: The service of this FunctionDefinition.  # noqa: E501
        :type service: str
        :param network: The network of this FunctionDefinition.  # noqa: E501
        :type network: str
        :param image: The image of this FunctionDefinition.  # noqa: E501
        :type image: str
        :param env_process: The env_process of this FunctionDefinition.  # noqa: E501
        :type env_process: str
        :param env_vars: The env_vars of this FunctionDefinition.  # noqa: E501
        :type env_vars: Dict[str, str]
        :param constraints: The constraints of this FunctionDefinition.  # noqa: E501
        :type constraints: List[str]
        :param labels: The labels of this FunctionDefinition.  # noqa: E501
        :type labels: Dict[str, str]
        :param annotations: The annotations of this FunctionDefinition.  # noqa: E501
        :type annotations: Dict[str, str]
        :param secrets: The secrets of this FunctionDefinition.  # noqa: E501
        :type secrets: List[str]
        :param registry_auth: The registry_auth of this FunctionDefinition.  # noqa: E501
        :type registry_auth: str
        :param limits: The limits of this FunctionDefinition.  # noqa: E501
        :type limits: object
        :param requests: The requests of this FunctionDefinition.  # noqa: E501
        :type requests: object
        :param read_only_root_filesystem: The read_only_root_filesystem of this FunctionDefinition.  # noqa: E501
        :type read_only_root_filesystem: bool
        """
        self.swagger_types = {
            'service': str,
            'network': str,
            'image': str,
            'env_process': str,
            'env_vars': Dict[str, str],
            'constraints': List[str],
            'labels': Dict[str, str],
            'annotations': Dict[str, str],
            'secrets': List[str],
            'registry_auth': str,
            'limits': object,
            'requests': object,
            'read_only_root_filesystem': bool
        }

        self.attribute_map = {
            'service': 'service',
            'network': 'network',
            'image': 'image',
            'env_process': 'envProcess',
            'env_vars': 'envVars',
            'constraints': 'constraints',
            'labels': 'labels',
            'annotations': 'annotations',
            'secrets': 'secrets',
            'registry_auth': 'registryAuth',
            'limits': 'limits',
            'requests': 'requests',
            'read_only_root_filesystem': 'readOnlyRootFilesystem'
        }

        self._service = service
        self._network = network
        self._image = image
        self._env_process = env_process
        self._env_vars = env_vars
        self._constraints = constraints
        self._labels = labels
        self._annotations = annotations
        self._secrets = secrets
        self._registry_auth = registry_auth
        self._limits = limits
        self._requests = requests
        self._read_only_root_filesystem = read_only_root_filesystem

    @classmethod
    def from_dict(cls, dikt) -> 'FunctionDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The FunctionDefinition of this FunctionDefinition.  # noqa: E501
        :rtype: FunctionDefinition
        """
        return util.deserialize_model(dikt, cls)

    @property
    def service(self) -> str:
        """Gets the service of this FunctionDefinition.

        Name of deployed function  # noqa: E501

        :return: The service of this FunctionDefinition.
        :rtype: str
        """
        return self._service

    @service.setter
    def service(self, service: str):
        """Sets the service of this FunctionDefinition.

        Name of deployed function  # noqa: E501

        :param service: The service of this FunctionDefinition.
        :type service: str
        """
        if service is None:
            raise ValueError("Invalid value for `service`, must not be `None`")  # noqa: E501

        self._service = service

    @property
    def network(self) -> str:
        """Gets the network of this FunctionDefinition.

        Network, usually func_functions for Swarm (deprecated)  # noqa: E501

        :return: The network of this FunctionDefinition.
        :rtype: str
        """
        return self._network

    @network.setter
    def network(self, network: str):
        """Sets the network of this FunctionDefinition.

        Network, usually func_functions for Swarm (deprecated)  # noqa: E501

        :param network: The network of this FunctionDefinition.
        :type network: str
        """

        self._network = network

    @property
    def image(self) -> str:
        """Gets the image of this FunctionDefinition.

        Docker image in accessible registry  # noqa: E501

        :return: The image of this FunctionDefinition.
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image: str):
        """Sets the image of this FunctionDefinition.

        Docker image in accessible registry  # noqa: E501

        :param image: The image of this FunctionDefinition.
        :type image: str
        """
        if image is None:
            raise ValueError("Invalid value for `image`, must not be `None`")  # noqa: E501

        self._image = image

    @property
    def env_process(self) -> str:
        """Gets the env_process of this FunctionDefinition.

        Process for watchdog to fork  # noqa: E501

        :return: The env_process of this FunctionDefinition.
        :rtype: str
        """
        return self._env_process

    @env_process.setter
    def env_process(self, env_process: str):
        """Sets the env_process of this FunctionDefinition.

        Process for watchdog to fork  # noqa: E501

        :param env_process: The env_process of this FunctionDefinition.
        :type env_process: str
        """
        if env_process is None:
            raise ValueError("Invalid value for `env_process`, must not be `None`")  # noqa: E501

        self._env_process = env_process

    @property
    def env_vars(self) -> Dict[str, str]:
        """Gets the env_vars of this FunctionDefinition.

        Overrides to environmental variables  # noqa: E501

        :return: The env_vars of this FunctionDefinition.
        :rtype: Dict[str, str]
        """
        return self._env_vars

    @env_vars.setter
    def env_vars(self, env_vars: Dict[str, str]):
        """Sets the env_vars of this FunctionDefinition.

        Overrides to environmental variables  # noqa: E501

        :param env_vars: The env_vars of this FunctionDefinition.
        :type env_vars: Dict[str, str]
        """

        self._env_vars = env_vars

    @property
    def constraints(self) -> List[str]:
        """Gets the constraints of this FunctionDefinition.


        :return: The constraints of this FunctionDefinition.
        :rtype: List[str]
        """
        return self._constraints

    @constraints.setter
    def constraints(self, constraints: List[str]):
        """Sets the constraints of this FunctionDefinition.


        :param constraints: The constraints of this FunctionDefinition.
        :type constraints: List[str]
        """

        self._constraints = constraints

    @property
    def labels(self) -> Dict[str, str]:
        """Gets the labels of this FunctionDefinition.

        A map of labels for making scheduling or routing decisions  # noqa: E501

        :return: The labels of this FunctionDefinition.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels: Dict[str, str]):
        """Sets the labels of this FunctionDefinition.

        A map of labels for making scheduling or routing decisions  # noqa: E501

        :param labels: The labels of this FunctionDefinition.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def annotations(self) -> Dict[str, str]:
        """Gets the annotations of this FunctionDefinition.

        A map of annotations for management, orchestration, events and build tasks  # noqa: E501

        :return: The annotations of this FunctionDefinition.
        :rtype: Dict[str, str]
        """
        return self._annotations

    @annotations.setter
    def annotations(self, annotations: Dict[str, str]):
        """Sets the annotations of this FunctionDefinition.

        A map of annotations for management, orchestration, events and build tasks  # noqa: E501

        :param annotations: The annotations of this FunctionDefinition.
        :type annotations: Dict[str, str]
        """

        self._annotations = annotations

    @property
    def secrets(self) -> List[str]:
        """Gets the secrets of this FunctionDefinition.


        :return: The secrets of this FunctionDefinition.
        :rtype: List[str]
        """
        return self._secrets

    @secrets.setter
    def secrets(self, secrets: List[str]):
        """Sets the secrets of this FunctionDefinition.


        :param secrets: The secrets of this FunctionDefinition.
        :type secrets: List[str]
        """

        self._secrets = secrets

    @property
    def registry_auth(self) -> str:
        """Gets the registry_auth of this FunctionDefinition.

        Private registry base64-encoded basic auth (as present in ~/.docker/config.json)  # noqa: E501

        :return: The registry_auth of this FunctionDefinition.
        :rtype: str
        """
        return self._registry_auth

    @registry_auth.setter
    def registry_auth(self, registry_auth: str):
        """Sets the registry_auth of this FunctionDefinition.

        Private registry base64-encoded basic auth (as present in ~/.docker/config.json)  # noqa: E501

        :param registry_auth: The registry_auth of this FunctionDefinition.
        :type registry_auth: str
        """

        self._registry_auth = registry_auth

    @property
    def limits(self) -> object:
        """Gets the limits of this FunctionDefinition.


        :return: The limits of this FunctionDefinition.
        :rtype: object
        """
        return self._limits

    @limits.setter
    def limits(self, limits: object):
        """Sets the limits of this FunctionDefinition.


        :param limits: The limits of this FunctionDefinition.
        :type limits: object
        """

        self._limits = limits

    @property
    def requests(self) -> object:
        """Gets the requests of this FunctionDefinition.


        :return: The requests of this FunctionDefinition.
        :rtype: object
        """
        return self._requests

    @requests.setter
    def requests(self, requests: object):
        """Sets the requests of this FunctionDefinition.


        :param requests: The requests of this FunctionDefinition.
        :type requests: object
        """

        self._requests = requests

    @property
    def read_only_root_filesystem(self) -> bool:
        """Gets the read_only_root_filesystem of this FunctionDefinition.

        Make the root filesystem of the function read-only  # noqa: E501

        :return: The read_only_root_filesystem of this FunctionDefinition.
        :rtype: bool
        """
        return self._read_only_root_filesystem

    @read_only_root_filesystem.setter
    def read_only_root_filesystem(self, read_only_root_filesystem: bool):
        """Sets the read_only_root_filesystem of this FunctionDefinition.

        Make the root filesystem of the function read-only  # noqa: E501

        :param read_only_root_filesystem: The read_only_root_filesystem of this FunctionDefinition.
        :type read_only_root_filesystem: bool
        """

        self._read_only_root_filesystem = read_only_root_filesystem
